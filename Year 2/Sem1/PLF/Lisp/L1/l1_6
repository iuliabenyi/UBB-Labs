;a) Write a function to test whether a list is linear
;testLinear(l1..ln) = true, if n == 0
;						testLinear(l2..ln), l1 atom
(defun testLinear (l)
	(cond 
		((null l) t)
		((atom (car l)) (testLinear (cdr l)))
	)
)

;b) Write a function to replace the first occurence of an element E in a given list with an other element O.
;replace(l1..ln, e, o, sem) = nil, n == 0
;						 		o U replace(l2..ln, e, o , 0), if l1 == e and sem == 1
;								l1 U replace(l2..ln, e, o, sem), otherwise
(defun replaceL (l e o sem)
	(cond 
		((null l) nil)
		((and (= (car l) e) (= 1 sem)) (cons o (replaceL (cdr l) e o 0)))
		(T (cons (car l) (replaceL (cdr l) e o sem)))
	)
)

;c) Write a function to replace each sublist of a list with its last element. A sublist is an element from the first level, which is a list
;getLastElem(l1..ln) = l1, if n == 1
;						getLastElem(l2..ln), otherwise
(defun getLastElem (l)
	(cond 
		((null (cdr l)) (car l))
		(T (getLastElem (cdr l)))
	)
)

;replaceSublists(l1..ln) = nil, n = 0
;							replaceSublists(getLastElem(l1)) U replaceSublists(l2..ln), if l1 list 
;							l1 U replaceSublists(l2..ln), otherwise
(defun replaceSublists (l)
	(cond 
		((null l) nil)
		((listp (car l)) (cons (getLastElem (car l)) (replaceSublists (cdr l))))
		(T (cons (car l) (replaceSublists (cdr l))))
	)
)
;merge pe jumate 

;d) Write a function to merge two sorted lists without keeping double values
;mergeLists(l1..ln, k1..km) = l1..ln, if m == 0
;								k1..km, if n == 0
;								l1 U mergeLists(l2..ln, k1..km), if l1 < k1
;								k1 U mergeLists(l1..ln, k2..km), if k1 < l1
;								l1 U mergeLists(l2..ln, k2..km), if k1 == l1
(defun mergeLists (l k)
	(cond 
		((null k) l)
		((null l) k)
		((< (car l) (car k)) (cons (car l) (mergeLists (cdr l) k)))
		((< (car k) (car l)) (cons (car k) (mergeLists l (cdr k))))
		((= (car l) (car k)) (cons (car l) (mergeLists (cdr l) (cdr k))))
	)
)
















