;a) Write a function to return the n-th element of a list, or NIL if such an element does not exist.
;nthElem(l1..lm, n, pos) = nil, if m == 0
;							l1, if pos == n
;							nthElem(l2..lm, n, pos + 1), otherwise
(defun nthElem (l n pos)
	(cond
		((null l) nil)
		((= pos n) (car l))
		(T (nthElem (cdr l) n (+ 1 pos)))
	)
)

;b) Write a function to check whether an atom E is a member of a list which is not necessarily linear.
;checkMember(l1..ln, e) = nil, if n == 0
;							true, if l1 == e
;							checkMember(l2..ln, e), otherwise
(defun checkMember (l e)
	(cond 
		((null l) nil)
		((= (car l) e) t)
		(T (checkMember (cdr l) e))
	)
)

;Write a function to determine the list of all sublists of a given list, on any level.
;sublists(l1..ln) = nil, n == 0
;					l1 U sublists(l1), l1 list
;					sublists(l2..ln), otherwise
(defun sublists (l)
	(cond
		((null l) nil)
		((listp (car l)) (cons (car l) (cons (sublists (car l)) (sublists (cdr l)))))
		(T (sublists (cdr l)))
	)
)
;nu prea merge

;d) Write a function to transform a linear list into a set.
;countOcc(l1..ln, e) = 0, n == 0
;						1 + countOcc(l2..ln, e), if l1 == e
;						countOcc(l2..ln, e), otherwise
(defun countOcc (l e)
	(cond 
		((null l) 0)
		((= (car l) e) (+ 1 (countOcc (cdr l) e)))
		(T (countOcc (cdr l) e))
	)
)

;transform(l1..ln) = nil, n == 0 
;					 l1 U transform(l2..ln), if countOcc(l1) == 1
;					 transform(l2..ln), otherwise
(defun transform (l)
	(cond 
		((null l) nil)
		((= (countOcc l (car l)) 1) (cons (car l) (transform (cdr l))))
		(T (transform (cdr l)))
	)
)





















